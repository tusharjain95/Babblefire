BB=/sbin/busybox;

case $1 in
battinfo)
	echo Technology: $(cat /sys/class/power_supply/battery/technology)@nHealth: $(cat /sys/class/power_supply/battery/health)@nStatus: $(cat /sys/class/power_supply/battery/status)@nCharge Level: $(cat /sys/class/power_supply/battery/capacity)%
	;;
cpufreq)
    	if [ -e /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq ]; then
      		core0freq="$((`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq` / 1000)) MHz";
    	else
      		core0freq=Offline;
    	fi

    	if [ -e /sys/devices/system/cpu/cpu1/cpufreq/scaling_cur_freq ]; then
      		core1freq="$((`cat /sys/devices/system/cpu/cpu1/cpufreq/scaling_cur_freq` / 1000)) MHz";
    	else
      		core1freq=Offline;
    	fi
    
    	if [ -e /sys/devices/system/cpu/cpu2/cpufreq/scaling_cur_freq ]; then
      		core2freq="$((`cat /sys/devices/system/cpu/cpu2/cpufreq/scaling_cur_freq` / 1000)) MHz";
    	else
      		core2freq=Offline;
    	fi
    
    	if [ -e /sys/devices/system/cpu/cpu3/cpufreq/scaling_cur_freq ]; then
      		core3freq="$((`cat /sys/devices/system/cpu/cpu3/cpufreq/scaling_cur_freq` / 1000)) MHz";
    	else
      		core3freq=Offline;
    	fi

    	echo "CPU Core 1: $core0freq@nCPU Core 2: $core1freq@nCPU Core 3: $core2freq@nCPU Core 4: $core3freq";
  	;;
entropy)
    	echo $(cat /proc/sys/kernel/random/entropy_avail)kb;
  	;;
gpu)
  	echo Current frequency: $(($(cat /sys/class/kgsl/kgsl-3d0/gpuclk) / 1000000))MHz
  	;;
cpu)
	echo `cat /sys/kernel/krait_uv_info/krait_uV`
  	;;
temp)
  	echo Battery: $(($(cat /sys/class/power_supply/battery/temp) / 10))°C "|" CPU: $(cat /sys/class/thermal/thermal_zone5/temp)°C
  	;;
speedbin)
  	echo `cat /sys/devices/system/soc/soc0/soc_pvs`
  	;;
load)
	echo Hotplug Load: $(cat /sys/module/msm_hotplug/current_load)%
	;;
baseband)
  	echo `getprop gsm.version.baseband`
  	;;
serial)
  	P=/efs/FactoryApp/serial_no
  	if [ -f $P ]; then
    		echo `cat $P`
  	else
    		echo `getprop ro.boot.serialno`
  	fi
  	;;
selinux)
	echo `getenforce`;
	;;
memory)
	while read TYPE MEM KB
	do
		if [ "$TYPE" = "MemTotal:" ]; then
			TOTAL="$((MEM / 1024)) MB";
		elif [ "$TYPE" = "MemFree:" ]; then
			CACHED=$((MEM / 1024));
		elif [ "$TYPE" = "Cached:" ]; then
			FREE=$((MEM / 1024));
		fi;
	done < /proc/meminfo
	
	FREE="$((FREE + CACHED)) MB";
	echo "Total: $TOTAL@nFree: $FREE";
	;;
LiveTime)
	STATE="";
	CNT=0;
	SUM=`$BB awk '{s+=$2} END {print s}' /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state`;
	
	while read FREQ TIME; do
		if [ "$CNT" -ge $2 ] && [ "$CNT" -le $3 ]; then
			FREQ="$((FREQ / 1000)) MHz:";
			if [ $TIME -ge "100" ]; then
				PERC=`$BB awk "BEGIN { print ( ($TIME / $SUM) * 100) }"`;
				PERC="`$BB printf "%0.1f\n" $PERC`%";
				TIME=$((TIME / 100));
				STATE="$STATE $FREQ `$BB echo - | $BB awk -v "S=$TIME" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}'` ($PERC)@n";
			fi;
		fi;
		CNT=$((CNT+1));
	done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state;
	
	STATE=${STATE%??};
	echo "$STATE";
	;;
LiveUpTime)
	TOTAL=`$BB awk '{ print $1 }' /proc/uptime`;
	AWAKE=$((`$BB awk '{s+=$2} END {print s}' /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state` / 100));
	SLEEP=`$BB awk "BEGIN { print ($TOTAL - $AWAKE) }"`;
	
	PERC_A=`$BB awk "BEGIN { print ( ($AWAKE / $TOTAL) * 100) }"`;
	PERC_A="`$BB printf "%0.1f\n" $PERC_A`%";
	PERC_S=`$BB awk "BEGIN { print ( ($SLEEP / $TOTAL) * 100) }"`;
	PERC_S="`$BB printf "%0.1f\n" $PERC_S`%";
	
	TOTAL=`$BB echo - | $BB awk -v "S=$TOTAL" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}'`;
	AWAKE=`$BB echo - | $BB awk -v "S=$AWAKE" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}'`;
	SLEEP=`$BB echo - | $BB awk -v "S=$SLEEP" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}'`;
	echo "Total: $TOTAL (100.0%)@nSleep: $SLEEP ($PERC_S)@nAwake: $AWAKE ($PERC_A)";
	;;
LiveUnUsed)
	UNUSED="";
	while read FREQ TIME; do
		FREQ="$((FREQ / 1000)) MHz";
		if [ $TIME -lt "100" ]; then
			UNUSED="$UNUSED$FREQ, ";
		fi;
	done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state;
	
	UNUSED=${UNUSED%??};
	echo "$UNUSED";
	;;
Wakelocks)
	WL="";
	CNT=0;
	PATH=/sdcard/wakelocks.txt;
	$BB sort -nrk 7 /proc/wakelocks > $PATH;
	
	while read NAME COUNT EXPIRE_COUNT WAKE_COUNT ACTIVE_SINCE TOTAL_TIME SLEEP_TIME MAX_TIME LAST_CHANGE; do
		if [ $CNT -lt 10 ]; then
			NAME=`$BB echo $NAME | $BB sed 's/PowerManagerService./PMS./;s/"//g'`
			TIME=`$BB awk "BEGIN { print ( $SLEEP_TIME / 1000000000 ) }"`;
			TIME=`$BB echo - | $BB awk -v "S=$TIME" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}'`;
			WL="$WL$NAME: $TIME@n";
		fi;
		CNT=$((CNT+1));
	done < $PATH;
	$BB rm -f $PATH;
	
	WL=${WL%??};
	echo $WL;
	;;
esac
